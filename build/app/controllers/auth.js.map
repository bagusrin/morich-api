{"version":3,"sources":["../src/app/controllers/auth.js"],"names":["connection","require","jwt","bcrypt","crypto","userModel","emailModel","cfg","cAuth","login","req","res","next","acquire","err","con","email","body","password","sql","query","data","release","status","json","statusCode","message","code","length","comparePassword","user_password","pp","user_photo","photoProfileUrl","fullName","user_firstname","user_lastname","splitName","trim","split","initialName","charAt","console","log","isActive","success","user_id","user_email","user_mobile_number","forgotPassword","secret","Date","now","token","createHmac","update","digest","sendEmailForgotPassword","passwordReset","params","passwordResetPost","hashSync","retypePassword","loginRequired","user","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["var connection = require('../../../config/db');\n\nvar jwt = require('jsonwebtoken'),\n    bcrypt = require('bcrypt'),\n    crypto = require('crypto'),\n    userModel = require('../models/user'),\n    emailModel = require('../models/email');\n    cfg = require('../../../config');\n \nfunction cAuth() {\n\n  this.login = function(req,res,next) {\n    connection.acquire(function(err,con){\n      if (err) throw err;\n\n        var email = req.body.email;\n        var password = req.body.password;\n\n        var sql = \"SELECT * FROM users WHERE user_email = '\"+email+\"' LIMIT 1\";\n\n        con.query(sql, function(err,data){\n          con.release();\n          if(err)\n              return res.status(500).json({statusCode:500,message: err.code});\n\n          if(data.length < 1)\n            return res.status(500).json({statusCode:500, message: 'Authentication failed. Invalid user or password.' });\n\n          if (!userModel.comparePassword(password,data[0].user_password)) {\n                return res.status(500).json({statusCode:500, message: 'Authentication failed. Invalid user or password.' });\n          }\n          \n          var pp = (data[0].user_photo) ? cfg.photoProfileUrl+''+data[0].user_photo : null;\n          var fullName = data[0].user_firstname+' '+data[0].user_lastname;\n\n          var splitName = fullName.trim().split(\" \");\n\n          if(splitName.length > 1){\n            var initialName = splitName[0].charAt(0)+''+splitName[1].charAt(0);\n          }else{\n            var initialName = splitName[0].charAt(0);\n          }\n\n          console.log(splitName.length);\n          \n\n          var isActive = (data[0].status == 1) ? true : false;\n          \n          return res.status(200).json({\n                                  statusCode:200,\n                                  success:true,\n                                  data:{\n                                    \"userId\":data[0].user_id,\n                                    \"email\":data[0].user_email,\n                                    \"firstName\":data[0].user_firstname,\n                                    \"lastName\":data[0].user_lastname,\n                                    \"mobileNumber\":data[0].user_mobile_number,\n                                    \"photoUrl\": pp,\n                                    \"initialName\": initialName,\n                                    \"isActive\": isActive\n                                  }\n                              });\n \n      });\n    });\n  };\n\n  this.forgotPassword = function(req,res,next) {\n    connection.acquire(function(err,con){\n      if (err) throw err;\n\n        var email = req.body.email;\n        var secret = \"ngopingapangopi\"+Date.now();\n\n        const token = crypto.createHmac('sha256', secret)\n                           .update(email)\n                           .digest('hex');\n\n        var sql = \"SELECT * FROM users WHERE user_email = '\"+email+\"' LIMIT 1\";\n\n        con.query(sql, function(err,data){\n          con.release();\n          if(err)\n              return res.status(500).json({statusCode:500,message: err.code});\n\n          if(data.length < 1)\n            return res.status(500).json({statusCode:500, message: 'Invalid Email. Email has not registered.'});\n\n          con.query(\"UPDATE users set user_token = '\"+token+\"', update_date = NOW() WHERE user_email = '\"+email+\"'\", function(err,data){\n            if(err)\n              return res.status(500).json({statusCode:500,message: err.code});\n\n            emailModel.sendEmailForgotPassword(email,token);\n            return res.status(200).json({statusCode:200,success:true});\n          });\n      });\n    });\n  };\n\n  this.passwordReset = function(req,res,next) {\n    connection.acquire(function(err,con){\n      if (err) throw err;\n\n        var token = req.params.token;\n\n        console.log(token);\n\n        var sql = \"SELECT * FROM users WHERE user_token = '\"+token+\"' LIMIT 1\";\n\n        con.query(sql, function(err,data){\n          con.release();\n          if(err)\n              return res.status(500).json({statusCode:500,message: err.code});\n\n          if(data.length < 1)\n            return res.status(500).json({statusCode:500, message: 'Link token may have expired.'});\n\n          return res.status(200).json({statusCode:200,success:true,data:{\"token\":token}});\n      });\n    });\n  };\n  \n  this.passwordResetPost = function(req,res,next) {\n     connection.acquire(function(err,con){\n        if (err) throw err;\n\n          var token = req.body.token;\n          var password = bcrypt.hashSync(req.body.password, 10);\n          var retypePassword = req.body.retypePassword;\n\n          if(req.body.password != req.body.retypePassword)\n            return res.status(500).json({statusCode:500,message: \"Password doesn't match\"});\n\n          var sql = \"UPDATE users SET user_password = '\"+password+\"', update_date = NOW() WHERE user_token = '\"+token+\"'\";\n\n          console.log(sql);\n\n          con.query(sql, function(err,data){\n            con.release();\n            if(err)\n                return res.status(500).json({statusCode:500,message: err.code});\n               \n            return res.status(200).json({statusCode:200,success:true});\n        });\n     });\n  };\n\n  \n\n  \n\n  \n\n  this.loginRequired = function(req, res, next) {\n    if (req.user) {\n      next();\n    } else {\n      return res.status(401).json({statusCode:401, message: 'Unauthorized user!' });\n    }\n  };\n}\nmodule.exports = new cAuth();"]}