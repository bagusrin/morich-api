{"version":3,"sources":["../src/app/controllers/spiderman.js"],"names":["connection","require","jwt","bcrypt","userModel","cSpiderman","spidermanList","req","res","next","acquire","err","con","query","data","release","status","json","statusCode","message","code","dt","i","length","push","spiderman_id","spiderman_email","spiderman_name","spiderman_level","success","spidermanDetail","params","id","spidermanRegister","email","body","password","hashSync","name","level","sql","spidermanLogin","comparePassword","spiderman_password","spidermanDashboard","member_joined","member_potential","member_active","video","module","exports"],"mappings":"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","file":"spiderman.js","sourcesContent":["var connection = require('../../../config/db');\n\nvar jwt = require('jsonwebtoken'),\n    bcrypt = require('bcrypt'),\n    userModel = require('../models/user');\n \nfunction cSpiderman() {\n \n  this.spidermanList = function(req,res,next) {\n     connection.acquire(function(err,con){\n        if (err) throw err;\n          con.query('SELECT * FROM spiderman', function(err,data){\n            con.release();\n            if(err)\n                return res.status(500).json({statusCode:500,message: err.code});\n               \n\n            var dt = [];\n            for (var i = 0; i < data.length; i++) {\n                dt.push({\n                  \"id\": data[i].spiderman_id,\n                  \"email\": data[i].spiderman_email,\n                  \"name\": data[i].spiderman_name,\n                  \"level\": data[i].spiderman_level\n                });\n            } \n\n            return res.status(200).json({\n                                    statusCode:200,\n                                    success:true,\n                                    data:dt\n                                });\n   \n        });\n     });\n  };\n\n  this.spidermanDetail = function(req,res,next) {\n     connection.acquire(function(err,con){\n        if (err) throw err;\n          con.query('SELECT * FROM spiderman WHERE spiderman_id='+req.params.id+' LIMIT 1', function(err,data){\n            con.release();\n            if(err)\n                return res.status(500).json({statusCode:500,message: err.code});\n\n            if(data.length < 1){\n              res.status(404).json({statusCode:404,message: \"Data not found\"});\n            }else{\n              var dt = [];\n              dt.push({\n                \"id\": data[0].spiderman_id,\n                \"email\": data[0].spiderman_email,\n                \"name\": data[0].spiderman_name,\n                \"level\": data[0].spiderman_level\n              });\n\n              return res.status(200).json({\n                                      statusCode:200,\n                                      success:true,\n                                      data:dt[0]\n                                  });\n            }\n        });\n     });\n  };\n\n  this.spidermanRegister = function(req,res,next) {\n     connection.acquire(function(err,con){\n        if (err) throw err;\n\n          var email = req.body.email;\n          var password = bcrypt.hashSync(req.body.password, 10);\n          var name = req.body.name;\n          var level = 99;\n          var status = 1;\n\n          var sql = \"INSERT INTO spiderman (spiderman_email,spiderman_password,spiderman_name,spiderman_level,status) VALUES ('\"+email+\"', '\"+password+\"', '\"+name+\"', '\"+level+\"', '\"+status+\"')\";\n\n          con.query(sql, function(err,data){\n            con.release();\n            if(err)\n                return res.status(500).json({statusCode:500,message: err.code});\n               \n\n            return res.status(200).json({\n                                    statusCode:200,\n                                    success:true,\n                                    data:data\n                                });\n   \n        });\n     });\n  };\n\n  this.spidermanLogin = function(req,res,next) {\n     connection.acquire(function(err,con){\n        if (err) throw err;\n\n          var email = req.body.email;\n          var password = req.body.password;\n\n          var sql = \"SELECT * FROM spiderman WHERE spiderman_email = '\"+email+\"'\";\n\n          con.query(sql, function(err,data){\n            con.release();\n            if(err)\n                return res.status(500).json({statusCode:500,message: err.code});\n\n            if(data.length < 1)\n              return res.status(500).json({statusCode:500, message: 'Authentication failed. Invalid admin or password.' });\n               \n            if (!userModel.comparePassword(password,data[0].spiderman_password)) {\n                  return res.status(401).json({statusCode:500, message: 'Authentication failed. Invalid admin or password.' });\n            }\n\n            var dt = [];\n            dt.push({\n              \"id\": data[0].spiderman_id,\n              \"email\": data[0].spiderman_email,\n              \"name\": data[0].spiderman_name,\n              \"level\": data[0].spiderman_level\n            });\n            \n            return res.status(200).json({\n                                    statusCode:200,\n                                    success:true,\n                                    data:dt[0]\n                                });\n   \n        });\n     });\n  };\n\n  this.spidermanDashboard = function(req,res,next) {\n     connection.acquire(function(err,con){\n        if (err) throw err;\n\n          var email = req.body.email;\n          var password = req.body.password;\n\n          var sql = \"SELECT (SELECT count(user_id) FROM users WHERE status <> 0) AS member_joined \\\n                    ,(SELECT count(user_id) FROM users WHERE status = 2) AS member_potential \\\n                    ,(SELECT count(user_id) FROM users WHERE status = 1) AS member_active \\\n                    ,(SELECT count(video_id) FROM videos WHERE status = 1) AS video\";\n\n          con.query(sql, function(err,data){\n            con.release();\n            if(err)\n                return res.status(500).json({statusCode:500,message: err.code});\n\n            \n\n            var dt = [];\n            dt.push({\n              \"totalJoinedMember\": data[0].member_joined,\n              \"totalPotentialMember\": data[0].member_potential,\n              \"totalActiveMember\": data[0].member_active,\n              \"totalVideo\": data[0].video\n            });\n            \n            return res.status(200).json({\n                                    statusCode:200,\n                                    success:true,\n                                    data:dt[0]\n                                });\n   \n        });\n     });\n  };\n}\nmodule.exports = new cSpiderman();"]}